import json

from typing import List, Dict

import streamingjson
from agent.utils.constants import AGENT_STATUS, AgentResponse
from agent.agent.subagents.base_agent import BaseAPI


SYSTEM_PROMPT = """\
You are a helpful assistant for biologists conducting research. Your task is to generate responses to the user's request
based on previous messages.

The user's request is:
===
PUT_USER_REQUEST_HERE
===

All previous messages generated by other agents are:
===
PUT_PREVIOUS_RESPONSE_HERE
===

When you generate the response, You must obey these rules:
1. Don't showcase any of your thinking process in the response.
2. Directly respond to the user's request.
3. Revise your wording and make sure your answer matches the user's question.
4. If previous execution failed, analyze the failure and provide some suggestions for the user to improve the request.

You should follow the format below:

<Responder>
{
    "sender": "responder",
    "content": "Summarize the information and provide a comprehensive answer to the user's request."
}
</Responder>

Now, let's start generating responses for the user's request.
"""


class Responder(BaseAPI):
    """
    A sub-agent that generates responses to the user's request.
    """
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    
    def stream_chat(self, user_request: str, message_pool: List[Dict]):
        """
        Stream chat with the user
        Args:
            user_request: The user's request.
            
            message_pool: The pool of messages generated by other agents.
        """
        prev_response = "\n\n".join([json.dumps(message, indent=4) for message in message_pool])
        system_prompt = SYSTEM_PROMPT.replace("PUT_USER_REQUEST_HERE", user_request)
        system_prompt = system_prompt.replace("PUT_PREVIOUS_RESPONSE_HERE", prev_response)
        
        input_messages = [{"role": "user", "content": system_prompt}]
        
        response = self.client.call_openai(
            messages=input_messages,
            stream=True,
            temperature=0.001,
        )
        
        complete = ""
        lexer = streamingjson.Lexer()
        for chunk in response:
            content = "" if chunk.choices[0].delta is None else chunk.choices[0].delta.content or ""
            lexer.append_string(content)
            complete += content
            yield AgentResponse(
                content=lexer.complete_json().split("<Responder>")[-1],
                status=AGENT_STATUS.GENERATING
            )
        
        complete = complete.split("<Responder>")[-1].split("</Responder>")[0]
        yield AgentResponse(
            content=complete,
            status=AGENT_STATUS.GENERATING
        )
