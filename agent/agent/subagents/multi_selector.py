import json

from typing import List, Dict

import streamingjson
from agent.utils.constants import AGENT_STATUS, AgentResponse
from agent.agent.subagents.base_agent import BaseAPI


SYSTEM_PROMPT = """\
You are an expert decision-making agent. Your task is to evaluate the user's request, the conversation history, and a set of available options, and then select the single most appropriate option to proceed.

The user's request is:
===
PUT_USER_REQUEST_HERE
===

All previous messages generated by other agents are:
===
PUT_PREVIOUS_RESPONSE_HERE
===

When you make your selection, you must obey these rules:

1. Carefully analyze all provided information: the user's request, the full conversation history, and the descriptions of the available options.
2. Your goal is to choose the option that represents the most logical and effective next step to fulfill the user's ultimate goal.
3. You MUST select exactly one option from the provided list. Do not select more than one.


You must follow the format below:

<MultiSelector>
{
    "sender": "multi_selector",
    "reason": "Provide a brief explanation of why you chose this option.",
    "decision": "The one-letter code representing the selected option.",
}
</MultiSelector>

Now, let's start the selection process.
"""


class MultiSelector(BaseAPI):
    """
    A sub-agent that generates responses to the user's request.
    """
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    
    def stream_chat(self, user_request: str, message_pool: List[Dict]):
        """
        Stream chat with the user
        Args:
            user_request: The user's request.
            
            message_pool: The pool of messages generated by other agents.
        """
        prev_response = "\n\n".join([json.dumps(message, indent=4) for message in message_pool])
        system_prompt = SYSTEM_PROMPT.replace("PUT_USER_REQUEST_HERE", user_request)
        system_prompt = system_prompt.replace("PUT_PREVIOUS_RESPONSE_HERE", prev_response)
        
        input_messages = [{"role": "user", "content": system_prompt}]
        
        response = self.client.call_openai(
            messages=input_messages,
            stream=True,
            temperature=0.001,
        )
        
        complete = ""
        lexer = streamingjson.Lexer()
        for chunk in response:
            content = "" if chunk.choices[0].delta is None else chunk.choices[0].delta.content or ""
            lexer.append_string(content)
            complete += content
            yield AgentResponse(
                content=lexer.complete_json().split("<MultiSelector>")[-1],
                status=AGENT_STATUS.GENERATING
            )
        
        complete = complete.split("<MultiSelector>")[-1].split("</MultiSelector>")[0]
        yield AgentResponse(
            content=complete,
            status=AGENT_STATUS.GENERATING
        )
